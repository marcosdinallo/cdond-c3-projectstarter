version: 2.1

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete all files in the current S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}
            then
              aws s3 rm s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current AWS CloudFormation stacks
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront
            then 
              aws cloudformation delete-stack --stack-name udapeople-cloudfront
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            then 
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            then
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            fi
          when: on_fail

  revert-migration:
    description: Revert the latest migration
    steps:
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
          when: on_fail
      - add_ssh_keys:
          fingerprints: ["a5:75:5a:df:3b:7b:7e:b6:66:1a:3d:79:81:09:63:06"]
      - run:
          name: Revert the last migration
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory db_rollback.yml
          when: on_fail

orbs:
  slack: circleci/slack@3.4.2

jobs:
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Compile the code
            command: |
              cd frontend
              npm run build
        - slack/status
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Test the code
            command: |
              cd frontend
              npm run test

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Scan the code
            command: |
              cd frontend
              npm audit --audit-level=critical

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
        - run:
            name: Compile the code
            command: |
              cd backend
              npm run build
        - run:
            name: Copy compiled backend for future use in ansible
            command: |
              mkdir /tmp/workspace
              cp ./backend/package.json /tmp/workspace/
              cd backend/dist
              tar -zcvf /tmp/workspace/backend.tar.gz ./
        - persist_to_workspace:
            root: /tmp/workspace
            paths:
              - backend.tar.gz
              - package.json              
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd backend
              npm install
        - run:
            name: Test the code
            command: |
              cd backend
              npm run test
        - slack/status          

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd backend
              npm install
        - run:
            name: Scan the code
            command: |
              cd backend
              npm audit fix --audit-level=critical --force
        - slack/status      

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-infra-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: DNS
          when: on_success
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend-ec2-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-infra-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"   
      - destroy-environment         
   
                  
      

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          no_output_timeout: 10m
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          no_output_timeout: 10m
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["a5:75:5a:df:3b:7b:7e:b6:66:1a:3d:79:81:09:63:06"] 
      - run:
          name: Configure server via ansible to deploy the backend
          no_output_timeout: 10m
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy.yml


      - destroy-environment
      - revert-migration 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}.s3-website.us-east-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            if curl -s "http://${PUBLIC_DNS}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migration            
                 
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Build the frontend
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          no_output_timeout: 10m
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Promote the new deployment and delete the old one
          command: |
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            echo "Create/Update CloudFront"
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            echo "Delete old infrastructure"
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              echo deleting all files at S3 bucket udapeople-s3bucket-${OLD_CIRCLE_WORKFLOW_ID}
              aws s3 rm s3://udapeople-s3bucket-${OLD_CIRCLE_WORKFLOW_ID}/ --recursive
              echo deleting stack udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              echo deleting stack udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment


  
    
       

workflows:
  my_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-frontend:    
          filters:
            branches:
              only: master      
          requires: [test-frontend]
      - scan-backend:    
          filters:
            branches:
              only: master      
          requires: [test-backend]
      - deploy-infrastructure:
          filters:
            branches:
              only: master
      - deploy-backend:
          filters:
            branches:
              only: master        
          requires: [deploy-infrastructure, scan-frontend, scan-backend]
      - deploy-frontend:
          filters:
            branches:
              only: master        
          requires: [deploy-backend]   
      - smoke-test: 
          filters:
            branches:
              only: master        
          requires: [deploy-backend, scan-frontend, scan-backend]
      - cloudfront-update:
          filters:
            branches:
              only: master        
          requires: [smoke-test]    


      