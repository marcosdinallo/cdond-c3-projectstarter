version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Compile the code
            command: |
              cd frontend
              npm run build
        - slack/status
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build

  test-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Test the code
            command: |
              cd frontend
              npm run test

  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd frontend
              npm install
        - run:
            name: Scan the code
            command: |
              cd frontend
              npm audit --audit-level=critical

  build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd backend
              npm install
        - run:
            name: Compile the code
            command: |
              cd backend
              npm run build
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build

  test-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd backend
              npm install
        - run:
            name: Test the code
            command: |
              cd backend
              npm run test
        - slack/status          

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              cd backend
              npm install
        - run:
            name: Scan the code
            command: |
              cd backend
              npm audit fix --audit-level=critical --force
        - slack/status      

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-infra-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name udapeople-infra-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"   
      - run:
          name: DNS
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend-ec2-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
                -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT \
                --data ${PUBLIC_DNS} \
                https://api.memstash.io/values/public_dns
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
       

workflows:
  my_workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]    
      - scan-frontend:    
          requires: [test-frontend]
      - scan-backend:    
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend]
      